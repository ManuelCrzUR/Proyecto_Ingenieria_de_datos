from dash import Dash, html, dcc
import plotly.express as px
import pandas as pd
import psycopg2

try:
    connection = psycopg2.connect(
        host='localhost',
        user='postgres',
        password='123456789',
        database='Proyecto2',
        port="5432"
    )
    print("Conexión exitosa")
    cursor = connection.cursor()
    
    app = Dash(__name__)
    
    # Escenario 1
    cursor.execute("SELECT id_nomenclatura, estado_amenaza, id_amenaza FROM especies_amenazadas")
    rows = cursor.fetchall()
    
    lista_icn = []
    lista_iczn = []
    
    for row in rows:
        if row[0] == 'ICN':
            lista_icn.append(row)
        elif row[0] == 'ICZN':
            lista_iczn.append(row)
        else:
            print("No se puede añadir el dato: ", row)

    df_icn = pd.DataFrame(lista_icn, columns=['Nomenclatura', 'Estado de Amenaza', 'ID Amenaza'])
    df_iczn = pd.DataFrame(lista_iczn, columns=['Nomenclatura', 'Estado de Amenaza', 'ID Amenaza'])

    df_icn_count = df_icn['Estado de Amenaza'].value_counts().reset_index()
    df_icn_count.columns = ['Estado de Amenaza', 'Número de Especies']

    df_iczn_count = df_iczn['Estado de Amenaza'].value_counts().reset_index()
    df_iczn_count.columns = ['Estado de Amenaza', 'Número de Especies']

    color_mapping = {
        'EN': '#FF0000',  # Rojo
        'CR': '#FFA500',  # Naranja
        'VU': '#FFFF00',  # Amarillo
    }

    category_order = df_icn_count['Estado de Amenaza'].tolist()

    fig_icn = px.bar(df_icn_count, 
                     x='Estado de Amenaza', 
                     y='Número de Especies', 
                     title='ICN - Número de Especies por Estado de Amenaza',
                     color='Estado de Amenaza',
                     color_discrete_map=color_mapping,
                     category_orders={'Estado de Amenaza': category_order})

    fig_iczn = px.bar(df_iczn_count, 
                      x='Estado de Amenaza', 
                      y='Número de Especies', 
                      title='ICZN - Número de Especies por Estado de Amenaza',
                      color='Estado de Amenaza',
                      color_discrete_map=color_mapping,
                      category_orders={'Estado de Amenaza': category_order})

    fig_icn.update_layout({
        'plot_bgcolor': 'rgba(0, 0, 0, 0)',
        'paper_bgcolor': 'rgba(0, 0, 0, 0)',
    })

    fig_iczn.update_layout({
        'plot_bgcolor': 'rgba(0, 0, 0, 0)',
        'paper_bgcolor': 'rgba(0, 0, 0, 0)',
    })

    # Escenario 2
    cursor.execute("SELECT reino, filio FROM clasificacion_superior")
    rows = cursor.fetchall()
    
    lista_a = []
    lista_p = []
    lista_f = []
    
    for row in rows:
        if row[0] == 'Fungi':
            lista_f.append(row[1])
        elif row[0] == 'Plantae':
            lista_p.append(row[1])
        elif row[0] == 'Animalia':
            lista_a.append(row[1])
        else:
            print("Dato no es posible de añadir")

    df_fungi = pd.DataFrame(lista_f, columns=['Filo'])
    df_plantae = pd.DataFrame(lista_p, columns=['Filo'])
    df_animalia = pd.DataFrame(lista_a, columns=['Filo'])

    fig_fungi = px.pie(df_fungi, names='Filo', title='Fungi - Distribución de Filos', 
                       hover_data={'Filo': True})
    fig_fungi.update_traces(textinfo='label+percent', pull=[0.1, 0.1, 0.1])
    fig_plantae = px.pie(df_plantae, names='Filo', title='Plantae - Distribución de Filos', 
                         hover_data={'Filo': True})
    fig_plantae.update_traces(textinfo='label+percent', pull=[0.1, 0.1, 0.1])
    fig_animalia = px.pie(df_animalia, names='Filo', title='Animalia - Distribución de Filos', 
                          hover_data={'Filo': True})
    fig_animalia.update_traces(textinfo='label+percent', pull=[0.1, 0.1, 0.1])

    # Escenario 3
    cursor.execute("SELECT estado_taxonomico, rango_taxonomico FROM informacion_taxonomica")
    rows = cursor.fetchall()
    
    lista_aceptado = []
    lista_dudoso = []
    lista_sinonimo = []
    lista_valido = []
    
    for row in rows:
        if row[0] == 'Aceptado':
            lista_aceptado.append(row)
        elif row[0] == 'Dudoso':
            lista_dudoso.append(row)
        elif row[0] == 'Sinonimo':
            lista_sinonimo.append(row)
        elif row[0] == 'Valido':
            lista_valido.append(row)
        else:
            print("No se puede añadir el dato: ", row)

    df_aceptado = pd.DataFrame(lista_aceptado, columns=['Estado Taxonómico', 'Rango Taxonómico'])
    df_dudoso = pd.DataFrame(lista_dudoso, columns=['Estado Taxonómico', 'Rango Taxonómico'])
    df_sinonimo = pd.DataFrame(lista_sinonimo, columns=['Estado Taxonómico', 'Rango Taxonómico'])
    df_valido = pd.DataFrame(lista_valido, columns=['Estado Taxonómico', 'Rango Taxonómico'])

    df_aceptado_count = df_aceptado['Rango Taxonómico'].value_counts().reset_index()
    df_aceptado_count.columns = ['Rango Taxonómico', 'Número de Especies']

    df_dudoso_count = df_dudoso['Rango Taxonómico'].value_counts().reset_index()
    df_dudoso_count.columns = ['Rango Taxonómico', 'Número de Especies']

    df_sinonimo_count = df_sinonimo['Rango Taxonómico'].value_counts().reset_index()
    df_sinonimo_count.columns = ['Rango Taxonómico', 'Número de Especies']

    df_valido_count = df_valido['Rango Taxonómico'].value_counts().reset_index()
    df_valido_count.columns = ['Rango Taxonómico', 'Número de Especies']

    fig_aceptado = px.bar(df_aceptado_count, 
                          x='Rango Taxonómico', 
                          y='Número de Especies', 
                          title='Aceptado - Número de Especies por Rango Taxonómico',
                          color='Rango Taxonómico',
                          color_discrete_map=color_mapping,
                          category_orders={'Rango Taxonómico': category_order})

    fig_dudoso = px.bar(df_dudoso_count, 
                        x='Rango Taxonómico', 
                        y='Número de Especies', 
                        title='Dudoso - Número de Especies por Rango Taxonómico',
                        color='Rango Taxonómico',
                        color_discrete_map=color_mapping,
                        category_orders={'Rango Taxonómico': category_order})

    fig_sinonimo = px.bar(df_sinonimo_count, 
                          x='Rango Taxonómico', 
                          y='Número de Especies', 
                          title='Sinónimo - Número de Especies por Rango Taxonómico',
                          color='Rango Taxonómico',
                          color_discrete_map=color_mapping,
                          category_orders={'Rango Taxonómico': category_order})

    fig_valido = px.bar(df_valido_count, 
                        x='Rango Taxonómico', 
                        y='Número de Especies', 
                        title='Válido - Número de Especies por Rango Taxonómico',
                        color='Rango Taxonómico',
                        color_discrete_map=color_mapping,
                        category_orders={'Rango Taxonómico': category_order})

    fig_aceptado.update_layout({
        'plot_bgcolor': 'rgba(0, 0, 0, 0)',
        'paper_bgcolor': 'rgba(0, 0, 0, 0)',
    })

    fig_dudoso.update_layout({
        'plot_bgcolor': 'rgba(0, 0, 0, 0)',
        'paper_bgcolor': 'rgba(0, 0, 0, 0)',
    })

    fig_sinonimo.update_layout({
        'plot_bgcolor': 'rgba(0, 0, 0, 0)',
        'paper_bgcolor': 'rgba(0, 0, 0, 0)',
    })

    fig_valido.update_layout({
        'plot_bgcolor': 'rgba(0, 0, 0, 0)',
        'paper_bgcolor': 'rgba(0, 0, 0, 0)',
    })

    # Escenario 4
    cursor.execute("SELECT genero, nombre_vernaculo FROM intraespecificidad_epiteto")
    rows = cursor.fetchall()
    
    df = pd.DataFrame(rows, columns=['Género', 'Nombre Vernáculo'])

    fig_escenario_4 = px.bar(df, x='Género', y='Nombre Vernáculo', color='Género')

    app.layout = html.Div([
        html.H1("Análisis de Especies Amenazadas"),
        dcc.Graph(figure=fig_icn),
        dcc.Graph(figure=fig_iczn),
        html.P("Con esto concluiríamos el análisis del proyecto esperando que sea de su agrado."),
        
        html.H1("Distribución de Filos por Reino"),
        html.Div([
            dcc.Graph(figure=fig_fungi),
            dcc.Graph(figure=fig_plantae),
            dcc.Graph(figure=fig_animalia),
        ], style={'color': 'black'}),
        
        html.H1("Análisis de Rango Taxonómico"),
        dcc.Graph(figure=fig_aceptado),
        dcc.Graph(figure=fig_dudoso),
        dcc.Graph(figure=fig_sinonimo),
        dcc.Graph(figure=fig_valido),
        html.P("Con esto concluiríamos el análisis del proyecto esperando que sea de su agrado."),
        
        html.H1(children='Gráfico Estado Taxonómico'),
        html.Div(children='''
            Dash: Aplicación para graficar datos
        '''),
        dcc.Graph(id='example-graph', figure=fig_escenario_4)
    ], style={'backgroundColor': '#FFFFFF'})

    if __name__ == '__main__':
        app.run_server(debug=False)

except Exception as ex:
    print(ex)
finally:
    connection.close()
    print("Conexión finalizada")
