# Escenario 1

from dash import Dash, html, dcc
import plotly.express as px
import pandas as pd
import psycopg2

try:
    connection = psycopg2.connect(
        host='localhost',
        user='postgres',
        password='123456789',
        database='pr_final',
        port="5432"
    )
    print("Conexión exitosa")
    cursor = connection.cursor()
    
    # Escenario 1
    cursor.execute("SELECT id_nomenclatura, estado_amenaza, id_amenaza FROM especies_amenazadas")
    rows = cursor.fetchall()
    
    lista_icn = []
    lista_iczn = []
    
    for row in rows:
        if row[0] == 'ICN':
            lista_icn.append(row)
        elif row[0] == 'ICZN':
            lista_iczn.append(row)
        else:
            print("No se puede añadir el dato: ", row)

    # Convertir los resultados a DataFrames de Pandas
    df_icn = pd.DataFrame(lista_icn, columns=['Nomenclatura', 'Estado de Amenaza', 'ID Amenaza'])
    df_iczn = pd.DataFrame(lista_iczn, columns=['Nomenclatura', 'Estado de Amenaza', 'ID Amenaza'])

    # Contar el número de especies en cada estado de amenaza
    df_icn_count = df_icn['Estado de Amenaza'].value_counts().reset_index()
    df_icn_count.columns = ['Estado de Amenaza', 'Número de Especies']

    df_iczn_count = df_iczn['Estado de Amenaza'].value_counts().reset_index()
    df_iczn_count.columns = ['Estado de Amenaza', 'Número de Especies']

    app = Dash(__name__)

    # Definir un diccionario de colores específico para cada estado de amenaza
    color_mapping = {
        'EN': '#FF0000',  # Rojo
        'CR': '#FFA500',  # Naranja
        'VU': '#FFFF00',  # Amarillo
    }

    # Obtener el orden de categorías del primer DataFrame
    category_order = df_icn_count['Estado de Amenaza'].tolist()

    # Crear las gráficas con colores específicos y el mismo orden de categorías
    fig_icn = px.bar(df_icn_count, 
                     x='Estado de Amenaza', 
                     y='Número de Especies', 
                     title='ICN - Número de Especies por Estado de Amenaza',
                     color='Estado de Amenaza',
                     color_discrete_map=color_mapping,
                     category_orders={'Estado de Amenaza': category_order})

    fig_iczn = px.bar(df_iczn_count, 
                      x='Estado de Amenaza', 
                      y='Número de Especies', 
                      title='ICZN - Número de Especies por Estado de Amenaza',
                      color='Estado de Amenaza',
                      color_discrete_map=color_mapping,
                      category_orders={'Estado de Amenaza': category_order})

    # Configurar el fondo transparente para las gráficas
    fig_icn.update_layout({
        'plot_bgcolor': 'rgba(0, 0, 0, 0)',
        'paper_bgcolor': 'rgba(0, 0, 0, 0)',
    })

    fig_iczn.update_layout({
        'plot_bgcolor': 'rgba(0, 0, 0, 0)',
        'paper_bgcolor': 'rgba(0, 0, 0, 0)',
    })

    app.layout = html.Div([
        html.H1("Análisis de Especies Amenazadas"),
        dcc.Graph(figure=fig_icn),
        dcc.Graph(figure=fig_iczn),
        html.P("Con esto concluiríamos el análisis del proyecto esperando que sea de su agrado.", 
               style={'backgroundColor': '#FFFFFF'}),  # Color de fondo de la página
        html.P("""
            N:
                Ventaja: La gráfica nos permite observar cada uno de los estados de amenaza (crítico, vulnerable, en peligro) para las plantas y los animales,
                y también se observa una mayor cantidad de plantas en estado crítico en comparación a los animales. 
                Desventaja: Los datos analizados aunque nos muestran la cantidad de especies y su estado de amenaza no nos indica con exactitud cuales
                son las especies que se encuentran amenazadas solo si son ICN o ICZN.

            M:
                Ventaja: Nos permite visualizar dos gráficos de barra distintos para cada una de las nomenclaturas presentes. 
                En este caso, es posible representar el comportamiento de cada uno de los estados y la cantidad exacta mediante un hover a cada una de las barras.
                Desventaja: Personas que no puedan realizar un hover con el mouse, no podrán ver el valor exacto para cada una de las columnas en las gráficas. 
                Además, es complejo determinar un número total de los datos para cada una de las gráficas.

            M:
                Ventaja: Como se puede ver en la gráfica, las especies mayormente amenazadas son los animales (ICN) que las plantas (ICZN),
                es decir, su estado de vulnerabilidad es mayor en comparación al de las plantas.
                Desventaja:  A pesar de que se puede observar un porcentaje aproximado de las especies en cada uno de los estados de amenaza,
                no se informa la causa de dicha vulnerabilidad tanto en los animales como en las plantas.
        """, style={'color': 'black'})
    ])

    # Escenario 2

    cursor.execute("SELECT clasificacion_superior.reino, clasificacion_superior.filio FROM clasificacion_superior")
    rows = cursor.fetchall()
    
    lista_a = []
    lista_p = []
    lista_f = []
    
    for row in rows:
        if row[0] == 'Fungi':
            lista_f.append(row[1])
        elif row[0] == 'Plantae':
            lista_p.append(row[1])
        elif row[0] == 'Animalia':
            lista_a.append(row[1])
        else:
            print("Dato no es posible de añadir")

    # Contar la frecuencia de cada filo en cada reino
    df_fungi = pd.DataFrame(lista_f, columns=['Filo'])
    df_plantae = pd.DataFrame(lista_p, columns=['Filo'])
    df_animalia = pd.DataFrame(lista_a, columns=['Filo'])

    fig_fungi = px.pie(df_fungi, names='Filo', title='Fungi - Distribución de Filos', 
                       hover_data={'Filo': True})
    fig_fungi.update_traces(textinfo='label+percent', pull=[0.1, 0.1, 0.1])  # Agregar etiquetas de datos
    fig_plantae = px.pie(df_plantae, names='Filo', title='Plantae - Distribución de Filos', 
                        hover_data={'Filo': True})
    fig_plantae.update_traces(textinfo='label+percent', pull=[0.1, 0.1, 0.1])  # Agregar etiquetas de datos
    fig_animalia = px.pie(df_animalia, names='Filo', title='Animalia - Distribución de Filos', 
                         hover_data={'Filo': True})
    fig_animalia.update_traces(textinfo='label+percent', pull=[0.1, 0.1, 0.1])  # Agregar etiquetas de datos

    app.layout = html.Div([
        html.H1("Distribución de Filos por Reino"),
        html.Div([
            dcc.Graph(figure=fig_fungi),
            dcc.Graph(figure=fig_plantae),
            dcc.Graph(figure=fig_animalia)
        ]),
        html.P("""
            N:
                Ventaja: Podemos observar que la gráfica representa la cantidad de filos que se encuentran en cada uno de los reinos, 
                evidenciando que el reino con la menor cantidad de filos encontrados es el reino fungi, el cual cuenta con un total de 81 especies.
                Desventaja: La gráfica muestra las especies pero no indica específicamente a cuáles de ellas se está haciendo referencia dentro de cada filo, 
                lo que genera dificultad en determinar sus filos respectivos.
                
            M:
                Ventajas: Se usa un gráfico apropiado para determinar el total de especies en cada una de las familias presentes en la base de datos, 
                esto ayuda a las personas consultantes a saber que el gráfico habla de la totalidad de un conjunto de datos determinados. 
                Es una buena alternativa si se quiere ser más específico en un estudio por familias de las especies en peligro a nivel nacional.
                Desventajas: En este caso, es muy complicado de determinar e identificar los datos que son pequeños, 
                dado que por su proporción cuentan con una visibilidad bastante reducida. Es difícil saber la cantidad de datos para cada uno de los filos que se pueden ver en cada una de las gráficas.

            M:
                Ventaja: Similarmente al escenario anterior, se puede determinar de manera precisa el nivel de la afectación en cada reino 
                (animalia, fungi, plantae) dependiendo de la filo a la que pertenece, en este caso, 
                se observa que la especie más evidentemente afectada es del reino plantae, por encima del reino animalia y esta a su vez, por encima del reino fungi.
                Desventaja: No se puede observar claramente los datos pertenecientes a cada reino en el eje x, es decir, qué filos pertenecen al reino animalia, cuáles al reino fungi y cuáles al reino vegetal.
        """, style={'color': 'black'})
    ])
    
except Exception as error:
    print("Error al conectar a la base de datos", error)
finally:
    if connection:
        cursor.close()
        connection.close()
        print("Conexión cerrada")

if __name__ == '__main__':
    app.run_server(debug=True)
